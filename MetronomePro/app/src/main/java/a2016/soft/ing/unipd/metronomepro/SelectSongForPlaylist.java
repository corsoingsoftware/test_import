package a2016.soft.ing.unipd.metronomepro;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.support.v7.widget.helper.ItemTouchHelper;
import android.view.View;

import java.util.ArrayList;

import a2016.soft.ing.unipd.metronomepro.adapters.SelectSongForPlaylistAdapter;
import a2016.soft.ing.unipd.metronomepro.adapters.touch.helpers.DragTouchHelperCallback;
import a2016.soft.ing.unipd.metronomepro.adapters.touch.helpers.OnStartDragListener;
import a2016.soft.ing.unipd.metronomepro.data.access.layer.DataProvider;
import a2016.soft.ing.unipd.metronomepro.data.access.layer.DataProviderBuilder;
import a2016.soft.ing.unipd.metronomepro.entities.EntitiesBuilder;
import a2016.soft.ing.unipd.metronomepro.entities.Song;
import a2016.soft.ing.unipd.metronomepro.entities.TimeSlicesSong;

import static a2016.soft.ing.unipd.metronomepro.ActivityExtraNames.*;
/**
 * Created by giuli on 27/11/2016.
 */

/**
 * SelectSongForPlaylist are built for insert the songs that are saved into the database, into a
 * playlist that is recived from an other activity.
 */
public class SelectSongForPlaylist extends AppCompatActivity implements OnStartDragListener {

    private RecyclerView rVSelectSong;
    private RecyclerView.LayoutManager rVLayoutManager;
    private SelectSongForPlaylistAdapter selectSongForPlaylistAdapter;
    private ArrayList<Song> songsAlreadyIntoPlaylist;  //rappresent the songs recived from the activity that want to insert new songs
    private ArrayList<Song> savedSongs = new ArrayList<>(); //it is used for save the instance of the activity
    private ArrayList<Song> selectedSongs; //the song that the user has selected
    private ArrayList<Song> songForAdapter; //this is the list of the songs used to give to the adapter constructor
    private DataProvider db = DataProviderBuilder.getDefaultDataProvider(this);
    private ItemTouchHelper itemTouchHelper;

    private static final int SONG_CREATED = 1;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        //autogenerated code of onCreate
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_select_song_for_playlist);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        db = DataProviderBuilder.getDefaultDataProvider(this);
        //this is the tipical code for initializing a recycleview
        rVSelectSong = (RecyclerView)findViewById(R.id.recicle_song_for_playlist);
        rVSelectSong.setHasFixedSize(true);
        rVLayoutManager = new LinearLayoutManager(this);
        rVSelectSong.setLayoutManager(rVLayoutManager);


        songForAdapter= (ArrayList<Song>) db.getAllSongs();//in the beginning songsForAdapter contains All the songs of the Database

        //restoring the instance of the song selected and deselected
        //for more information https://developer.android.com/guide/components/activities/activity-lifecycle.html
        if(savedInstanceState !=null && (savedInstanceState.containsKey(SONG_TO_ADD)||savedInstanceState.containsKey(SELECTED_SONGS_KEY))){//save the instance of the activity
            savedSongs = savedInstanceState.getParcelableArrayList(SELECTED_SONGS_KEY);//get the parcel of the all songs in the list
            selectedSongs = savedInstanceState.getParcelableArrayList(SONG_TO_ADD);//get the parcel of the song selected
            selectSongForPlaylistAdapter = new SelectSongForPlaylistAdapter(this,savedSongs,selectedSongs,this);//adapter initialized
            rVSelectSong.setAdapter(selectSongForPlaylistAdapter);//and passed to the recycleView
        }
        else{
            Intent intent=getIntent();
            if(intent!=null) {
                try {
                    songsAlreadyIntoPlaylist = intent.getParcelableArrayListExtra(PLAYLIST);//takes the intent from ModifyPlaylistActivity
                    //ModifyPlaylistActivity is a class that rapresent the playlist
                    //it already  contains songs..
                    //when the user inserts the new songs in the playlist, it must be able to enter only the songs that are not yet within the playlist
                    //so I take all the songs in the database and I subtract those that pass me from ModifyPlaylistActivity
                     for (int songsToRemoveIndex = 0; songsToRemoveIndex< songsAlreadyIntoPlaylist.size(); songsToRemoveIndex++) {
                        for (int songsLoadedIndex = 0;songsLoadedIndex<songForAdapter.size();songsLoadedIndex++) {
                            if(songsAlreadyIntoPlaylist.get(songsToRemoveIndex).getName().compareTo(songForAdapter.get(songsLoadedIndex).getName())==0){
                                songForAdapter.remove(songsLoadedIndex);
                            }
                        }
                    }


                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }


            selectSongForPlaylistAdapter = new SelectSongForPlaylistAdapter(this,songForAdapter,this);//adapter initialized
            rVSelectSong.setAdapter(selectSongForPlaylistAdapter);//and passed to the recycleview
            DragTouchHelperCallback myItemTouchHelper = new DragTouchHelperCallback(selectSongForPlaylistAdapter);
            itemTouchHelper = new ItemTouchHelper(myItemTouchHelper);
            itemTouchHelper.attachToRecyclerView(rVSelectSong);
        }

        FloatingActionButton passSelectedSongs = (FloatingActionButton) findViewById(R.id.fab);
        //I return with this button the songs selected by the user to ModifyPlaylistActivity
        passSelectedSongs.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent songsToAdd = new Intent(getApplicationContext(),ModifyPlaylistActivity.class);
                songsToAdd.putParcelableArrayListExtra(SONG_TO_ADD,(ArrayList<Song>) selectSongForPlaylistAdapter.getSelectedSongs());
                //the intent now contains the songs selected by the user
                setResult(RESULT_OK,songsToAdd);
                finish();
            }
        });

        FloatingActionButton fabToEditorActivity = (FloatingActionButton) findViewById(R.id.FabtoEditorActivity);
        //to create a new TimeSlice song with the activity SongCreator
        fabToEditorActivity.setOnClickListener(new View.OnClickListener() {
            @Override
            //if I need to modify a songs! I pass it to extra
            public  void onClick(View view) {
                Intent songCreated = new Intent(getApplicationContext(),SongCreator.class);
                songCreated.putExtra(SONG_TO_EDIT,EntitiesBuilder.getTimeSlicesSong());
                startActivityForResult(songCreated,SONG_CREATED);
            }
        });
    }
    @Override
    /**
     * If the activity is being re-initialized after previously being shut down then this Bundle
     * contains the data it most recently supplied in this method
     */
    protected void onSaveInstanceState(Bundle outState) {
        //it takes all the songs in the adapter
        outState.putParcelableArrayList(SELECTED_SONGS_KEY, (ArrayList<Song>) selectSongForPlaylistAdapter.getArraySongs());
        //it takes only the songs that user selected
        outState.putParcelableArrayList(SONG_TO_ADD,(ArrayList<Song>)selectSongForPlaylistAdapter.getSelectedSongs());

        super.onSaveInstanceState(outState);
    }

    @Override
    /**
     * this method takes the TimeSlice song created by SongCreator
     */
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(resultCode == RESULT_OK){
            if(requestCode == SONG_CREATED){
                TimeSlicesSong songCreated = data.getParcelableExtra(SONG_TO_EDIT);
                db.saveSong(songCreated);//save in database
                selectSongForPlaylistAdapter.addSong(songCreated);//add to adapter
                selectSongForPlaylistAdapter.notifyDataSetChanged();
            }
        }
    }


    @Override
    public void onStartDrag(RecyclerView.ViewHolder viewHolder) {

    }
}



