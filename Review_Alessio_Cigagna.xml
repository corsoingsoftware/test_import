<?xml version="1.0" encoding="UTF-8"?>
<review xmlns="http://plugins.intellij.net/revu" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://plugins.intellij.net/revu http://plugins.intellij.net/revu/ns/revu_1_0.xsd" name="Review Alessio Cigagna" status="reviewing" shared="true">
  <history createdBy="[unknown]" lastUpdatedBy="[unknown]" createdOn="2016-11-23 20:59:23 +0100" lastUpdatedOn="2016-11-23 20:59:27 +0100"/>
  <goal></goal>
  <referential>
    <priorities/>
    <tags/>
    <users>
      <user displayName="AlessioCigagna" login="AlessioCigagna" roles="admin,reviewer,author"/>
    </users>
  </referential>
  <filescope pathPattern="file[*]:*//*"/>
  <issues>
    <issue filePath="MetronomePro/app/src/main/java/a2016/soft/ing/unipd/metronomepro/sound/management/AudioTrackController.java" summary="Regroup the same type variables" vcsRev="556aa1ca7c3b2d4993914461ec7b59c658a4ec7f" lineStart="33" lineEnd="33" hash="201456498" status="to_resolve">
      <history createdBy="AlessioCigagna" lastUpdatedBy="AlessioCigagna" createdOn="2016-11-23 21:03:50 +0100" lastUpdatedOn="2016-11-23 21:03:50 +0100"/>
      <desc>I think that all the same type variables like &quot;maxBPM&quot;, &quot;minBPM&quot;, &quot;currBPM&quot;, ecc. could be regruped as &quot;private int maxBPM, minBPM, currBPM,...;&quot;.
The code would be easier to read.</desc>
    </issue>
    <issue filePath="MetronomePro/app/src/main/java/a2016/soft/ing/unipd/metronomepro/sound/management/AudioTrackController.java" summary="Public or private?" vcsRev="556aa1ca7c3b2d4993914461ec7b59c658a4ec7f" lineStart="54" lineEnd="54" hash="666279378" status="to_resolve">
      <history createdBy="AlessioCigagna" lastUpdatedBy="AlessioCigagna" createdOn="2016-11-23 21:06:58 +0100" lastUpdatedOn="2016-11-23 21:06:58 +0100"/>
      <desc>It&apos;s better to explicit if this method is public or private</desc>
    </issue>
    <issue filePath="MetronomePro/app/src/main/java/a2016/soft/ing/unipd/metronomepro/sound/management/AudioTrackController.java" summary="Delete the unused code" vcsRev="556aa1ca7c3b2d4993914461ec7b59c658a4ec7f" lineStart="59" lineEnd="59" hash="-636732753" status="to_resolve">
      <history createdBy="AlessioCigagna" lastUpdatedBy="AlessioCigagna" createdOn="2016-11-23 21:13:56 +0100" lastUpdatedOn="2016-11-23 21:14:59 +0100"/>
      <desc>If you no more need this commented code maybe you should delite it for an easier reading.</desc>
    </issue>
    <issue filePath="MetronomePro/app/src/main/java/a2016/soft/ing/unipd/metronomepro/sound/management/AudioTrackController.java" summary="Delete the unused code" vcsRev="556aa1ca7c3b2d4993914461ec7b59c658a4ec7f" lineStart="77" lineEnd="77" hash="-941267626" status="to_resolve">
      <history createdBy="AlessioCigagna" lastUpdatedBy="AlessioCigagna" createdOn="2016-11-23 21:18:28 +0100" lastUpdatedOn="2016-11-23 21:19:00 +0100"/>
      <desc>Same reason of the issue above</desc>
    </issue>
    <issue filePath="MetronomePro/app/src/main/java/a2016/soft/ing/unipd/metronomepro/sound/management/AudioTrackController.java" summary="Handle exception" vcsRev="556aa1ca7c3b2d4993914461ec7b59c658a4ec7f" lineStart="94" lineEnd="94" hash="100324464" status="to_resolve">
      <history createdBy="AlessioCigagna" lastUpdatedBy="AlessioCigagna" createdOn="2016-11-23 21:25:11 +0100" lastUpdatedOn="2016-11-23 21:25:11 +0100"/>
      <desc>It&apos;s always better to handle an exception (using a log for example)</desc>
    </issue>
    <issue filePath="MetronomePro/app/src/main/java/a2016/soft/ing/unipd/metronomepro/sound/management/AudioTrackController.java" summary="Specifications missing" vcsRev="556aa1ca7c3b2d4993914461ec7b59c658a4ec7f" lineStart="98" lineEnd="98" hash="552024108" status="to_resolve">
      <history createdBy="AlessioCigagna" lastUpdatedBy="AlessioCigagna" createdOn="2016-11-23 21:28:30 +0100" lastUpdatedOn="2016-11-23 21:28:30 +0100"/>
      <desc>This method should have the specification like methods above because you could need them in the testing phase.</desc>
    </issue>
    <issue filePath="MetronomePro/app/src/main/java/a2016/soft/ing/unipd/metronomepro/sound/management/AudioTrackController.java" summary="Specifications missing, add them to the methods below too." vcsRev="556aa1ca7c3b2d4993914461ec7b59c658a4ec7f" lineStart="126" lineEnd="126" hash="552024108" status="to_resolve">
      <history createdBy="AlessioCigagna" lastUpdatedBy="AlessioCigagna" createdOn="2016-11-23 21:32:51 +0100" lastUpdatedOn="2016-11-23 21:32:51 +0100"/>
      <desc>Same reason of the issue above.</desc>
    </issue>
    <issue filePath="MetronomePro/app/src/main/java/a2016/soft/ing/unipd/metronomepro/sound/management/AudioTrackController.java" summary="This method does nothing" vcsRev="556aa1ca7c3b2d4993914461ec7b59c658a4ec7f" lineStart="146" lineEnd="146" hash="146522308" status="to_resolve">
      <history createdBy="AlessioCigagna" lastUpdatedBy="AlessioCigagna" createdOn="2016-11-23 21:37:48 +0100" lastUpdatedOn="2016-11-23 21:39:48 +0100"/>
      <desc>This method is empty, maybe you missed that.</desc>
    </issue>
    <issue summary="Checklist used for code review" lineStart="-1" lineEnd="-1" hash="1508372605" status="to_resolve">
      <history createdBy="AlessioCigagna" lastUpdatedBy="AlessioCigagna" createdOn="2016-11-24 18:59:54 +0100" lastUpdatedOn="2016-11-24 18:59:54 +0100"/>
      <desc>	Checklist Item
1	Use Intention-Revealing Names
2	Pick one word per concept
3	Classes should be small!
4	Functions should be small!
5	Do one Thing
6	Don&apos;t Repeat Yourself (Avoid Duplication)
7	Explain yourself in code
8	Make sure the code formatting is applied
9	Use Exceptions rather than Return codes
10	Don&apos;t return Null
11	Avoid duplication of code
12	Minimize the accessibility of classes and members
13	Input into a system should be checked for valid data size and range
14	Avoid excessive logs for unusual behavior
15	Release resources (Streams, Connections, etc) in all cases
16	Limit the accessibility of packages,classes, interfaces, methods, and fields
17	Limit the extensibility of classes and methods (by making it final)
18	Avoid exposing constructors of sensitive classes
19	Keep Synchronized Sections Small
20	Avoid creating unnecessary objects
</desc>
    </issue>
  </issues>
</review>